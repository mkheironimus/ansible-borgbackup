#! /bin/bash
# {{ ansible_managed }}

BACKUP_STATUS=0

df --si

{% for job in backups %}
echo 'Create {{ job.value.path }}:'
nice {{ borg_system }}/borg.sh create --verbose --stats --show-rc \
    --exclude-caches --exclude-from={{ borg_system }}/exclude.lst \
{% for excl in job.value.exclude | default([]) %}
    --exclude {{ excl }} \
{% endfor %}
{% if job.value.compression is defined %}
    --compression='{{ job.value.compression }}' \
{% endif %}
    '::{hostname}-{{ job.key }}-{utcnow}' \
    {{ job.value.path }}
STATUS=$?
BACKUP_STATUS=$((BACKUP_STATUS + STATUS))
{% if job.value.prune | default(true) -%}
if [ ${STATUS} -eq 0 ] ; then
    echo 'Prune {{ job.value.path }}:'
    nice {{ borg_system }}/borg.sh prune --verbose --stats --show-rc \
        --list \
{% if job.value.hourly is defined %}
        --keep-hourly={{ job.value.hourly }} \
{% endif %}
{% if job.value.daily is defined %}
        --keep-daily={{ job.value.daily }} \
{% endif %}
{% if job.value.weekly is defined %}
        --keep-weekly={{ job.value.weekly }} \
{% endif %}
{% if job.value.monthly is defined %}
        --keep-monthly={{ job.value.monthly }} \
{% endif %}
        --glob-archives='{hostname}-{{ job.key }}-*'
    BACKUP_STATUS=$((BACKUP_STATUS + $?))
fi
{% endif %}

{% endfor %}
exit ${BACKUP_STATUS}
